# automatically generated by the FlatBuffers compiler, do not modify

# namespace: LungData

import flatbuffers

class LungImage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsLungImage(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LungImage()
        x.Init(buf, n + offset)
        return x

    # LungImage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LungImage
    def StudyInstanceUID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # LungImage
    def SeriesInstanceUID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # LungImage
    def ImageSOPUID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # LungImage
    def CaseID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # LungImage
    def Filepath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # LungImage
    def Nodules(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Nodule import Nodule
            obj = Nodule()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LungImage
    def NodulesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def LungImageStart(builder): builder.StartObject(6)
def LungImageAddStudyInstanceUID(builder, studyInstanceUID): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(studyInstanceUID), 0)
def LungImageAddSeriesInstanceUID(builder, seriesInstanceUID): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(seriesInstanceUID), 0)
def LungImageAddImageSOPUID(builder, imageSOPUID): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(imageSOPUID), 0)
def LungImageAddCaseID(builder, caseID): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(caseID), 0)
def LungImageAddFilepath(builder, filepath): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(filepath), 0)
def LungImageAddNodules(builder, nodules): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(nodules), 0)
def LungImageStartNodulesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def LungImageEnd(builder): return builder.EndObject()
